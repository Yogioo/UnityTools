#include "UnityCG.cginc"
#include "UnityDeferredLibrary.cginc"
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

cbuffer CB
{
    float2 _HiZTextureSize;
    float3 _CamPosition;
    float4 _CameraPanels[6];
    
    float4x4 _UNITY_MATRIX_VP;
    Texture2D<float4> _HiZMap;
    SamplerState sampler_HiZMap;

    int _Count;
    bool _ActiveFrustumCulling;
    bool _ActiveOcclusionCulling;
    
    // Output
    AppendStructuredBuffer<float4x4> LocalToWorldCulled;
};


struct CellData
{
	float3 center;
	float3 extent;
    float4x4 localToWorld;
};


StructuredBuffer<CellData> bounds;
// RWBuffer<int> results;

// Hi-Z Culling
inline uint IsVisibleAfterOcclusionCulling(float clipMinX, float clipMaxX, float clipMinY, float clipMaxY, float clipMinZ)
{
    // Change it to 0 - 1 range 
    float2 minXY = float2(clipMinX, clipMinY) * 0.5 + 0.5;
    float2 maxXY = float2(clipMaxX, clipMaxY) * 0.5 + 0.5;
    
    // Calculate hi-Z buffer mip
    int2 size = (maxXY - minXY) * _HiZTextureSize.xy;
    float mip = ceil(log2(max(size.x, size.y)));
    mip = clamp(mip, 0, 10);
    
    // Texel footprint for the lower (finer-grained) level
    float  level_lower = max(mip - 1, 0);
    float2 scale = exp2(-level_lower);
    float2 a = floor(minXY * scale);
    float2 b = ceil(maxXY * scale);
    float2 dims = b - a;
    
    // Use the lower level if we only touch <= 2 texels in both dimensions
    if (dims.x <= 2 && dims.y <= 2)
    {
        mip = level_lower;
    }
    
    // find the max depth
    // Hi-Z approach that allows for more samples.
    // https://www.gamedev.net/blogs/entry/2249535-hierarchical-z-buffer-occlusion-culling-updated-07152011/
    //const   int numSamples = 24;
    const   int   xSamples = 8; // numSamples + 1;
    const   int   ySamples = 25; // numSamples + 1;
    const  float    widthSS = (maxXY.x - minXY.x);
    const  float   heightSS = (maxXY.y - minXY.y);    
    const  float  maxSizeSS = max(widthSS * _HiZTextureSize.x, heightSS * _HiZTextureSize.y);    
    const  float      stepX = widthSS / xSamples;    
    const  float      stepY = heightSS / ySamples;    
    
    float HIZdepth = 1;    
    float yPos = minXY.y;
    for(int y = 0; y < ySamples; ++y)
    {
        float xPos = minXY.x;
        for(int x = 0; x < xSamples; ++x)
        {
            const float2 nCoords0 = float2(xPos, yPos);
            HIZdepth = min(HIZdepth, _HiZMap.SampleLevel(sampler_HiZMap, nCoords0, mip).r);
            xPos += stepX;
        }
        yPos += stepY;    
    }
    
    return (1.0 - clipMinZ) >= HIZdepth - 0.000015; // last is an epsilon
}

// 这是错误的
inline uint IsVisibleAfterFrustumCulling(float4 clipPos)
{
    return (clipPos.z > clipPos.w 
            || clipPos.x < -clipPos.w 
            || clipPos.x > clipPos.w 
            || clipPos.y < -clipPos.w 
            || clipPos.y > clipPos.w) 
            ? 0 : 1;
}

inline bool IsOutsideThePlane(float4 plane, float3 pointPosition)
{
    if (dot(plane.xyz, pointPosition) + plane.w > 0)
        return true;
    return false;
}

// Return is in Frustum
inline bool FrustumCull(float4 cameraPanels[6], float4 BoundsVerts[8])
{
    for (int i = 0; i < 6; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            if (!IsOutsideThePlane(cameraPanels[i], BoundsVerts[j].xyz))
            {
                break;
            }
            if (j == 7)
            {
                return false;
            }
        }
    }
    return true;
}


[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint tID = id.x;

    if(tID > _Count)
    {
        return;
    }
    // Get the instance data
    // CellData bound = bounds[index];
    CellData bound = bounds[tID];

    // Check if the instance is visible
    
    // float3 minPos = bound.center - bound.extent;
    // float3 maxPos = bound.center + bound.extent;
    float4 center = mul(bound.localToWorld, float4(0,0,0,1.0));
    float3 minPos = center.xyz - bound.extent;
    float3 maxPos = center.xyz + bound.extent;

    float4 boxCorners[8];
    boxCorners[0] = float4(minPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[1] = float4(minPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[2] = float4(minPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[3] = float4(minPos.x, maxPos.y, maxPos.z, 1.0);
    boxCorners[4] = float4(maxPos.x, minPos.y, minPos.z, 1.0);
    boxCorners[5] = float4(maxPos.x, minPos.y, maxPos.z, 1.0);
    boxCorners[6] = float4(maxPos.x, maxPos.y, minPos.z, 1.0);
    boxCorners[7] = float4(maxPos.x, maxPos.y, maxPos.z, 1.0);

    float4 clipPos = mul(_UNITY_MATRIX_VP, boxCorners[0]);
    uint isInFrustum;
    if (_ActiveFrustumCulling)
    {
        // isInFrustum = IsVisibleAfterFrustumCulling(clipPos);
        isInFrustum = FrustumCull(_CameraPanels,boxCorners);
    }else
    {
        isInFrustum=1;
    }

    clipPos.xyz = clipPos.xyz / clipPos.w;
    float clipMinX = clipPos.x;
    float clipMaxX = clipPos.x;
    float clipMinY = clipPos.y;
    float clipMaxY = clipPos.y;
    float clipMinZ = clipPos.z;

    // float minDistanceToCamera = distance(instance.boundsCenter.xyz, _CamPosition.xyz);
    [unroll]
    for (int i = 1; i < 8; i++)
    {
        clipPos = mul(_UNITY_MATRIX_VP, boxCorners[i]);

        // For Frustum
        // isInFrustum = saturate(isInFrustum + IsVisibleAfterFrustumCulling(clipPos));

        // For HiZ
        clipPos.xyz = clipPos.xyz / clipPos.w;
        clipMinX = min(clipPos.x, clipMinX);
        clipMaxX = max(clipPos.x, clipMaxX);
        clipMinY = min(clipPos.y, clipMinY);
        clipMaxY = max(clipPos.y, clipMaxY);
        clipMinZ = min(clipPos.z, clipMinZ);

        // For LODing
        // minDistanceToCamera = min(distance(boxCorners[i].xyz, _CamPosition.xyz), minDistanceToCamera);
    }

    uint isVisible = isInFrustum;

    if(_ActiveOcclusionCulling)
    {
        isVisible *= (isVisible > 0) ? IsVisibleAfterOcclusionCulling(clipMinX, clipMaxX, clipMinY, clipMaxY, clipMinZ) : 1;
    }

    if(isVisible >0)
    {
        LocalToWorldCulled.Append(bound.localToWorld);
    }
    // results[tID] = isVisible;
}
